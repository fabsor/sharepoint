<?php
// $Id$

function sharepoint_perm() {
  return array('access sharepoint soap module', 'administer sharepoint soap module');
}

function sharepoint_menu() {
 $items = array();

  $items['admin/config/services/sharepoint'] = array(
    'title' => t('SharePoint'),
    'description' => t('SharePoint integration settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharepoint_admin_stndsett'),
    'access arguments' => array('administer sharepoint soap module'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/config/services/sharepoint/sharepoint'] = array(
    'title' => t('SharePoint'),
    'description' => t('SharePoint integration settings.'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/services/sharepoint/lists'] = array(
    'title' => t('SharePoint Lists'),
    'description' => t('SharePoint list operations.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharepoint_admin_lists'),
    'access arguments' => array('administer sharepoint soap module'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['sharepoint'] = array(
    'title' => t('Sharepoint Test Page'),
    //'description' => t('Page for testing the connection with the sharepoint bus'),
    'page callback' => 'sharepoint_sync',
    'access arguments' => user_access('access sharepoint soap module'),
    'type' => MENU_CALLBACK,
    );

		// This item should be removed when the search hooks is working
		$items['sharepoint/search'] = array(
    'title' => t('Sharepoint Search Page'),
    //'description' => t('Page for testing the connection with the sharepoint bus'),
    'page callback' => 'sharepoint_searchtest',
    'access arguments' => user_access('access sharepoint soap module'),
    'type' => MENU_CALLBACK,
    );
  
  return $items;
}

function sharepoint_admin_stndsett() {
  $form['sharepoint_serviceurl'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URL'),
    '#default_value' =>  variable_get('sharepoint_serviceurl', ''),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t('The base URL to the sharepoint web, including _vti_bin'),
  );

  $form['sharepoint_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' =>  variable_get('sharepoint_username', ''),
    '#size' => 100,
    '#maxlength' => 300,
    '#description' => t('The username for the sharepoint webservice'),
  );
  
  $form['sharepoint_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#default_value' =>  variable_get('sharepoint_password', ''),
    '#size' => 100,
    '#maxlength' => 300,
    '#description' => t('The password for the sharepoint webservice'),
  );

  return system_settings_form($form);
}

function sharepoint_admin_lists() {
  $client = sharepoint_get_client('lists');
  $lists = sharepoint_get_splist_collection($client);
  foreach ($lists as $id => $list) {
    $options[$id] = $list['Title'];
  }

  $form['sharepoint_listname'] = array(
    '#type' => 'select',
    '#title' => t('List Name'),
    '#default_value' =>  variable_get('sharepoint_listname', ''),
    '#options' => $options,
    '#description' => t('The name of the List you want to publish on your site'),
  );
 
  $form['sharepoint_view'] = array(
    '#type' => 'textfield',
    '#title' => t('View'),
    '#default_value' =>  variable_get('sharepoint_view', ''),
    '#size' => 30,
    '#maxlength' => 30,
    '#description' => t('The name of the view to use'),
  );
  
  $form['sharepoint_num_records'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of records'),
    '#default_value' =>  variable_get('sharepoint_num_records', ''),
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t('The number of records to retrieve'),
  );
  
  $form['sharepoint_CAMLquery'] = array(
    '#type' => 'textarea',
    '#title' => t('CAML query (optional)'),
    '#default_value' =>  variable_get('sharepoint_CAMLquery', ''),
    '#rows' => 10,
    '#maxlength' => 300,
    '#description' => t('An optional CAML query to filter the list items. Leave empty to get all list items.'),
  );
  
  return system_settings_form($form);
}

function sharepoint_sync() {
  $soapClient = sharepoint_get_client('lists');
  $info = sharepoint_get_splist_info($soapClient, 'Test', '');
  var_dump($info);
}

function sharepoint_get_splist_items($client, $listname, $view = '', $query = '', $rowLimit = 10, $queryOptions = NULL, $webId = NULL) {
  $parameters = array(
    'listName' => $listname,
    'view' => $view,
    'query' => $query,
    'viewFields' => '',
    'rowLimit' => $rowLimit,
    'queryOptions' => $queryOptions,
    'webID' => $webId,
  );
  try {
    $response = $client->GetListItems($parameters);
    // SimpleXML does not support elements with : in them, so we just
    // strip them out.
    $data = str_replace(array('rs:', 'z:'),'', $response->GetListItemsResult->any);
    $xml = simplexml_load_string($data);

    // The first item is always the list definition. Let's make that into an object.
    $list = new stdClass;
    foreach ($xml->data->attributes() as $key => $value) {
      $list->{$key} = (string)$value;
    }
    $items = array();
    // The rest of the elements are list items. Go through them.
    foreach ($xml->data->row as $item) {
      $item_attributes = $item->attributes();
      $attributes = array();
      foreach ($item_attributes as $key => $value) {
        $attributes[$key] = (string) $value;
      }
      $items[] = $attributes;
    }
    $list->items = $items;
  }
  catch(Exception $exception) {
  	// Error handling should be handled in a central place instead of here.
  }
  return  $list;
}

/**
 * Get information for a list.
 * You can optionally pass in  view and get data for just the view.
 */
function sharepoint_get_splist_info($client, $list, $view = '') {
  $data = $client->GetListAndView(array('listName' => $list, 'viewName' => $view));
  $xml = simplexml_load_string($data->GetListAndViewResult->any);
  $list_info = new stdClass;
  $list_info->list_field_info = _sharepoint_traverse_field_info($xml->List->Fields->Field);
  $list_info->list_info['RegionalSettings'] = array();
  foreach ($xml->List->RegionalSettings[0] as $key => $setting) {
    $list_info->list_info['RegionalSettings'][$key] = _sharepoint_get_value($setting);
  }
  $list_info->list_info['ServerSettings'] = array();
  foreach ($xml->List->ServerSettings[0] as $key => $setting) {
    $list_info->list_info['ServerSettings'][$key] = _sharepoint_get_value($setting);
  }

  $list_info->view_fields = _sharepoint_traverse_field_info($xml->View->ViewFields->FieldRef);
  $list_info->list_info['ListSettings'] = _sharepoint_get_attributes($xml->List);
  return $list_info;
}

function _sharepoint_traverse_field_info($field_info) {
  $fields = array();
  foreach ($field_info as $data) {
    $fields[] = _sharepoint_get_attributes($data);
  }
  return $fields;
}

/**
 * Get all attributes for a field.
 * @param SimpleXMLElement $element
 */
function _sharepoint_get_attributes($element) {
  $field = array();
  foreach ($element->attributes() as $key => $attribute) {
    $field[$key] = _sharepoint_get_value($attribute);
  }
  return $field;
}

/**
 * Convert a sharepoint value to the right data type,
 * e.g. string, boolean...
 */
function _sharepoint_get_value($sp_value) {
  // Is this a boolean?
  $sp_value = strtolower($sp_value) == 'true' || strtolower($sp_value) == 'false' ? ($sp_value == 'TRUE') : (string)$sp_value;
  // It totally was! Let's not do anything more here then.
  if (is_bool($sp_value)) {
    return $sp_value;
  }
  // We can't deal with references to other data currently,
  // so let's just strip it out for now.
  return preg_replace('/(.*);#/', '', $sp_value, 1);
}

/**
 * Implementation of hook_feeds_plugins().
 */
function sharepoint_feeds_plugins() {
  $info = array();
  $path = drupal_get_path('module', 'sharepoint') . '/feeds';
  $info['sharepoint_view_parser'] = array(
    'name' => 'SharePoint View Parser',
    'description' => 'Parses Sharepoint Views.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'SharePointViewParser',
      'file' => 'SharePointViewParser.inc',
      'path' => $path,
    ),
  );
  $info['sharepoint_view_fetcher'] = array(
    'name' => 'SharePoint View Fetcher',
    'description' => 'Fetches Sharepoint Views.',
    'handler' => array(
      'parent' => 'FeedsFetcher', // A plugin needs to derive either directly or indirectly from FeedsFetcher, FeedsParser or FeedsProcessor.
      'class' => 'SharePointViewFetcher',
      'file' => 'SharePointViewFetcher.inc',
      'path' => $path,
    ),
  );
  return $info;
}


/**
* Implementation of hook_search_info().
*/
function sharepoint_search_info(){
  return array(
    'title' => 'Sharepoint Content', 
    'path' => 'sp', 
//    'conditions_callback' => 'sample_search_conditions_callback',
  );
}
/**
* Implementation of hook_search_execute().
*/
function sharepoint_search_execute($keys,$conditions){
    $client = sharepoint_get_client('search');
    return(sharepoint_get_spsearch_result($client,$keys));
}


function sharepoint_download($file_source, $file_target) {
       $rh = fopen($file_source, 'rb');
        $wh = fopen($file_target, 'wb');
        if ($rh===false || $wh===false) {
			// error reading or opening file
           return true;
        }
        while (!feof($rh)) {
            if (fwrite($wh, fread($rh, 1024)) === FALSE) {
                   // 'Download error: Cannot write to file ('.$file_target.')';
                   return true;
               }
        }
        fclose($rh);
        fclose($wh);
        // No error
        return false;
    }

function sharepoint_get_client($service) {
  //Authentication details
  $authParams = array('login' => variable_get('sharepoint_username',''),
  					'password' => variable_get('sharepoint_password',''),
  					'trace' => 1
  					);

  /* Path to the Lists.asmx WSDL file */
  $wsdl = variable_get('sharepoint_serviceurl','').'/_vti_bin/'.$service.'.asmx?WSDL';
  
  //Creating the SOAP client and initializing the GetListItems method parameters
  $soapClient = new SoapClient($wsdl, $authParams);

  return $soapClient;
}



function sharepoint_get_splist_collection($soapClient, $show_hidden = FALSE) {
  $lists = array();
  
  try {
    $sxml = simplexml_load_string($soapClient->GetListCollection()->GetListCollectionResult->any);
    foreach ($sxml as $list) {
      $list_attributes = $list->attributes();
      $hidden = (string) $list_attributes->Hidden;
      if (($show_hidden && $hidden == 'True') || $hidden == 'False') {
        $attributes = array();
        foreach ($list_attributes as $key => $value) {
          $attributes[$key] = (string) $value;
        }
        $lists[$attributes['ID']] = $attributes;
      }
    }
    return $lists;
  }
  catch(SoapFault $fault) {
  	echo 'Fault code: '.$fault->faultcode;
  	echo 'Fault string: '.$fault->faultstring;
  }
}

/**
 * Implementation of hook_views_api().
 */
function sharepoint_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'sharepoint') . '/views',
  );
}

// this should be removed once the search hook works...
function sharepoint_searchtest()
{
    $client = sharepoint_get_client('search');   
		sharepoint_get_spsearch_result($client,array("a"));

}

function sharepoint_get_spsearch_result($soapClient, $keys) {
	$results[] = array();
  
	$parameters = array(
    'queryXml' => "<QueryPacket xmlns='urn:Microsoft.Search.Query'><Query><Context><QueryText language='en-US' type='STRING'>".implode(',',$keys)."</QueryText></Context></Query></QueryPacket>",
  );
  try {

		
		$response = $soapClient->Query($parameters)->QueryResult;
	
		$sxml = simplexml_load_string($response);
		
		foreach ($sxml->Response->Range->Results->Document as $res) {
			$results[] = array(
					'link' => url($res->Action->LinkUrl, array('absolute' => TRUE)), 
					//'type' => check_plain('node'), 
					'title' => $res->Title, 
					//'user' => theme('admin'),
					'date' => getdate(), 
					//'node' => $node, 
					//'extra' => $extra, 
					'score' => $res["@attributes"]["relevance"], 
					//'snippet' => 'snippet',
					//search_excerpt($keys, $node->body),
			);
			
		}
	}
	catch(SoapFault $fault) {
  	echo 'Fault code: '.$fault->faultcode;
  	echo 'Fault string: '.$fault->faultstring;
  }
	print_r($results);
	return $results;
}

