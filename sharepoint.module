<?php
// $Id$

/**
 * @file
 * Sharepoint integration
 */


/**
 * Implementation of hook_permission().
 */
function sharepoint_permission() {
  $perms = array(
    'access sharepoint soap module' => array(
      'title' => t('Access sharepoint soap module'),
    ),
    'administer sharepoint soap module' => array(
      'title' => t('Administer sharepoint soap module'),
    ),
  );

  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function sharepoint_menu() {
  $items = array();

  // @TODO: reconsider SP-proxy path.
  $items['system/sp-proxy'] = array(
    'title' => 'Sharepoint file download',
    'page callback' => 'file_download',
    'page arguments' => array('sharepointProxy'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/sharepoint'] = array(
    'title' => t('SharePoint'),
    'description' => t('SharePoint integration settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharepoint_server_connection_settings_former'),
    'access arguments' => array('administer sharepoint soap module'),
    'file' => 'sharepoint.admin.inc',
  );

  $items['admin/config/sharepoint/sharepoint'] = array(
    'title' => t('SharePoint'),
    'description' => t('SharePoint integration settings.'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/sharepoint/lists'] = array(
    'title' => t('SharePoint Lists'),
    'description' => t('SharePoint list operations.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharepoint_admin_lists'),
    'access arguments' => array('administer sharepoint soap module'),
    'file' => 'sharepoint.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );  
  return $items;
}

/**
 * API function to check that sharepoint is configured.
 */
function sharepoint_is_configured() {
  return variable_get('sharepoint_server_url', FALSE) && variable_get('sharepoint_server_username', FALSE) && variable_get('sharepoint_server_password', FALSE);
}

/**
 * Implementation of hook_feeds_plugins().
 */
function sharepoint_feeds_plugins() {
  $info = array();
  $path = drupal_get_path('module', 'sharepoint') . '/feeds';
  $info['sharepoint_view_parser'] = array(
    'name' => 'SharePoint View Parser',
    'description' => 'Parses Sharepoint Views.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'SharePointViewParser',
      'file' => 'SharePointViewParser.inc',
      'path' => $path,
    ),
  );
  $info['sharepoint_view_fetcher'] = array(
    'name' => 'SharePoint View Fetcher',
    'description' => 'Fetches Sharepoint Views.',
    'handler' => array(
      'parent' => 'FeedsFetcher', // A plugin needs to derive either directly or indirectly from FeedsFetcher, FeedsParser or FeedsProcessor.
      'class' => 'SharePointViewFetcher',
      'file' => 'SharePointViewFetcher.inc',
      'path' => $path,
    ),
  );
  return $info;
}


/**
* Implementation of hook_search_info().
*/
function sharepoint_search_info() {
  return array(
    'title' => 'Sharepoint Content', 
    'path' => 'sharepoint', 
  );
}

/**
* Implementation of hook_search_execute().
*/
function sharepoint_search_execute($keys,$conditions){
  module_load_include('inc', 'sharepoint');
  $client = sharepoint_get_client('search');
  return(sharepoint_get_spsearch_result($client,$keys));
}

/**
 * Implementation of hook_views_api().
 */
function sharepoint_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'sharepoint') . '/views',
  );
}

function _sharepoint_throw_connection_error(SoapFault $fault) {
  throw new SharePointConnectionException(t('Could not connect to SharePoint Server:') . $fault->getMessage());
}
